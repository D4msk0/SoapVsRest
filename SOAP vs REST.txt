Both SOAP (Simple Object Access Protocol) and REST (Representational State Transfer) are widely used for building web services. However, the choice between SOAP and REST often depends on various factors, and there is no one-size-fits-all answer. Let's look at some considerations:

Ease of Use and Simplicity:

REST is generally considered more straightforward and easier to use. It relies on standard HTTP methods (GET, POST, PUT, DELETE), making it simpler to understand and implement.
SOAP, on the other hand, has a more complex protocol and can be more challenging to work with due to its extensive specification.
Flexibility:

REST is often considered more flexible because it can work with multiple data formats such as JSON, XML, plain text, and others.
SOAP typically uses XML for message format, which can be more rigid.
Performance:

REST is often considered more lightweight, leading to better performance in certain scenarios.
SOAP can have more overhead due to its XML-based messaging format.
Standards and Interoperability:

SOAP has a set of standardized protocols and specifications, which can lead to better interoperability between different platforms and technologies.
REST relies on standards like HTTP, but the lack of a strict standard can lead to variations in implementations.
Tooling and Libraries:

REST has a wide range of lightweight libraries and tools available, making it easier to work with in many programming languages.
SOAP has strong tooling and standardized protocols, but it can be bulkier compared to REST.
Industry Adoption:

REST is more commonly used in modern web development and is often the preferred choice for new projects.
SOAP is still prevalent in enterprise environments, especially in scenarios where strict standards and protocols are required.
Considering the current trend and the emphasis on simplicity, flexibility, and lightweight architectures, REST is often the preferred choice for modern applications, especially in scenarios like microservices architecture.

For a Java 17 Spring Boot application, you might find RESTful APIs to be more aligned with the Spring ecosystem, and there are excellent tools and support for building RESTful services with Spring Boot.

However, it's essential to assess your specific requirements, such as interoperability needs, existing system integrations, and any industry standards that might influence your decision. Always choose the technology that best fits the needs of your project.
